name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        # https://github.com/actions/cache
        # Pay attention to implementation examples, 
        # different programming languages are different files and folders should be cached
        # Speed up the workflow
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs: 
      script-file: ${{ steps.publish.outputs.script-file }}
      # https://docs.github.com/en/actions/learn-github-actions/contexts
      # Overall output to the job
      # Steps contex: has information about your steps. Accessing the output of this step with the help of step. context.
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename # Publish JS filename so other job can use it
        id: publish
        # Find the javascript file in the assets folder, the dist folder, 
        # then executes that command to output that filename.
        # $GITHUB_OUTPUT is an environmental variable
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts 
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          #path: |
          #  dist
          #  package.json


  deploy:
    needs: build # Run after build, artifacts needs to be created before download!
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        # https://github.com/actions/download-artifact
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}" # needs is a context
        # https://docs.github.com/en/actions/learn-github-actions/contexts 
      - name: Deploy
        run: echo "Deploying..."
